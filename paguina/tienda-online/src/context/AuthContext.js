import React, { createContext, useContext, useState, useEffect } from 'react';

// Crear el contexto
const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // üîÑ Cargar usuario desde localStorage al iniciar
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
    setLoading(false);
  }, []);

  // üü¢ Iniciar sesi√≥n
  const login = (userData) => {
    setUser(userData);
    localStorage.setItem('user', JSON.stringify(userData));
  };

  // üî¥ Cerrar sesi√≥n
  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };

  // üü° Actualizar perfil (nombre/email)
  const updateUser = (newData) => {
    setUser((prev) => {
      const updated = { ...prev, ...newData };
      localStorage.setItem('user', JSON.stringify(updated));
      return updated;
    });
  };

  // üîê Cambiar contrase√±a (solo ejemplo)
  const changePassword = (oldPassword, newPassword) => {
    console.log('Contrase√±a actual:', oldPassword);
    console.log('Nueva contrase√±a:', newPassword);
    alert('‚úÖ Contrase√±a cambiada correctamente (simulaci√≥n)');
    // Aqu√≠ podr√≠as conectar con tu backend real si lo deseas
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, updateUser, changePassword, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

// Hook personalizado
export const useAuth = () => useContext(AuthContext);
